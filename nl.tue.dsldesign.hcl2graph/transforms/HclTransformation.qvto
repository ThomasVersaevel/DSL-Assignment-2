modeltype HCL uses 'http://dsldesign.tue.nl/hcl';
modeltype Graph uses 'http://dsldesign.tue.nl/graph';

	
transformation uml2relational(in hcl : HCL, out Graph);

//transformation HclTransformation();

main() {
	hcl.rootObjects()[HCL::Computer]->map hcl2graph();
}

mapping HCL::Computer::hcl2graph() : Graph::Graph {
	var components = self.component->map component2node();
	nodes := Sequence {
		self.map computer2node(components)
	}->union( components );
	
	// self.component->map component2node();
//	nodes := self.map computer2node();
}

mapping HCL::Computer::computer2node(in n : Sequence(Graph::Node) ) : Graph::Node {
	label := self.label;
	shape := Graph::Shape::BOX;
	outEdges := n->map node2Sedge();
}

mapping HCL::Component::component2node() : Graph::Node {
	if (self.oclIsKindOf(HCL::DisplayUnit)) {
		label := self.label;
		shape := Graph::Shape::BOX;
		// outEdges := self.map node2Dedge();
		// nodes := self.
	} else if (self.oclIsKindOf(HCL::Processing)) {
		label := self.label;
		shape := Graph::Shape::BOX;
	}
}

// top level CPU
mapping HCL::Processing::processing2node(in n: Sequence(Graph::Node) ) : Graph::Node {
	shape := Graph::Shape::BOX;
	label := 'CPU';
	outEdges := n->map node2Sedge();
}

// top level Display
mapping HCL::Display::display2node(in n: Sequence(Graph::Node) ) : Graph::Node {
	shape := Graph::Shape::BOX;
	label := 'Display';
	outEdges := n->map node2Sedge();
}

mapping HCL::ProcessingUnit::speed2node() : Graph::Node {
	shape := Graph::Shape::BOX;
	label := self.speed.toString() + ' ' + 'GHz';
}

mapping HCL::DisplayUnit::diagonal2node() : Graph::Node {
	shape := Graph::Shape::BOX;
	label := self.diagonal.toString() + ' ' + 'Inch';
}

// OVAL nodes
mapping HCL::ProcessingUnit::cores2node() : Graph::Node {
	shape := Graph::Shape::OVAL;
	label := self.cores.toString() + ' ' + 'cores';
}

mapping HCL::ProcessingUnit::cache2node() : Graph::Node {
	shape := Graph::Shape::OVAL;
	label := self.l1.size.toString() + ' ' + self.l1.magnitude.toString();
}

mapping HCL::DisplayUnit::type2node() : Graph::Node {
	shape := Graph::Shape::OVAL;
	label := self.type.toString();
}

// solid EDGE
mapping Graph::Node::node2Sedge() : Graph::Edge {
	style := Graph::Style::SOLID;
	target := self;	
}

// dashed EDGE
mapping Graph::Node::node2Dedge() : Graph::Edge {
	style := Graph::Style::DASHED;
	target := self;	
}


//query getShape() : Graph::Shape {
//	return 
//}