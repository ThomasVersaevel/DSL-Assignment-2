modeltype HCL uses 'http://dsldesign.tue.nl/hcl';
modeltype Graph uses 'http://dsldesign.tue.nl/graph';

	
transformation uml2relational(in hcl : HCL, out Graph);

//transformation HclTransformation();

main() {
	hcl.rootObjects()[HCL::Model]->map model2graph();
}

mapping HCL::Model::model2graph() : Graph::Graph {
	nodes := getNodes();
	name := 'HCL Model';
}

query getNodes() : Sequence(Graph::Node) {

	// Display Component
	var dispComponents = HCL::DisplayUnit.allInstances()->map displayWprops2node()->asSequence()->flatten();
	var dispDiagonals = getAllUniqueDiagUnits()->map diag2node(dispComponents)->asSequence();
	var display = mapDisplay(dispDiagonals);
	
	// CPU Component
	var cpuComponents = HCL::ProcessingUnit.allInstances()->map cpuWprops2node()->asSequence()->flatten();
	var cpuSpeed = getAllUniqueSpeedUnits()->map speed2node(cpuComponents)->asSequence();
	//var cpuL1 = HCL::ProcessingUnit.allInstances()->map l12node(cpuComponents)->asSequence();
	var cpu = mapCpu(cpuSpeed);
	
	// Computers
	var computers = HCL::Computer.allInstances()->map computer2node(dispComponents->union(cpuComponents))->asSequence();
	
	return Sequence{
		display,
		cpu
	}->union(cpuSpeed)->union(cpuComponents)->union(dispDiagonals)->union(dispComponents)->union(computers); //->union(components)->union(speednodes);
}


// top computer
mapping HCL::Computer::computer2node(in n : Sequence(Graph::Node) ) : Graph::Node {
	label := self.label;
	shape := Graph::Shape::BOX;
	outEdges := n->select(e | self.component->exists(c | c.label = e.label))->node2edge(Graph::Style::SOLID);
}

/** DISPLAY **/

// top display node
query mapDisplay(in n : Sequence(Graph::Node)) : Graph::Node {
	return object Graph::Node { 
		label := 'Display'; 
		shape := Graph::Shape::BOX; 
		outEdges := n->node2edge(Graph::Style::SOLID);
	}
}

// get all units with unique diagonal
query getAllUniqueDiagUnits() : Sequence(HCL::DisplayUnit) {
	var diags = HCL::DisplayUnit.allInstances()->diagonal->asSet()->asSequence();
	return diags-> getDiagUnit();
}

// helps get unique diagonal unit
helper Real::getDiagUnit() : HCL::DisplayUnit {
	return HCL::DisplayUnit.allInstances()->selectOne(e | e.diagonal = self);
}

// helper for display properties
helper HCL::DisplayUnit::displayWprops2node() : Sequence(Graph::Node) {
	var type = self.map type2node();
	var comp = self.map display2node(type);
	return Sequence{ type, comp }
}

// display diagonals
mapping HCL::DisplayUnit::diag2node(in n : Sequence(Graph::Node)) : Graph::Node {
	shape := Graph::Shape::BOX;
	label := self.diagonal.toString() + ' Inch';
	outEdges := n->select(e | getAllUnitsWithDiagonal(self.diagonal)->exists(c | c.label = e.label))->node2edge(Graph::Style::SOLID);
}

// queries all Display Units with a specific diagonal
query getAllUnitsWithDiagonal(in d : Real) : Sequence(HCL::DisplayUnit) {
	return HCL::DisplayUnit.allInstances()->select(e | e.diagonal = d)->asSequence();
}

// display components
mapping HCL::DisplayUnit::display2node(in t : Graph::Node) : Graph::Node {
	label := self.label;
	shape := Graph::Shape::BOX;
	outEdges := t.node2edge(Graph::Style::DASHED);
}


mapping HCL::DisplayUnit::type2node() : Graph::Node {
	shape := Graph::Shape::OVAL;
	label := self.type.toString();
}

/** CPU **/
// top cpu node
query mapCpu(in n : Sequence(Graph::Node)) : Graph::Node {
	return object Graph::Node { 
		label := 'CPU'; 
		shape := Graph::Shape::BOX; 
		outEdges := n->node2edge(Graph::Style::SOLID);
	}
}

// get all units with unique diagonal
query getAllUniqueSpeedUnits() : Sequence(HCL::ProcessingUnit) {
	var speeds = HCL::ProcessingUnit.allInstances()->speed->asSet()->asSequence();
	return speeds-> getSpeedUnit();
}

// helps get unique diagonal unit
helper Real::getSpeedUnit() : HCL::ProcessingUnit {
	return HCL::ProcessingUnit.allInstances()->selectOne(e | e.speed = self);
}

helper HCL::ProcessingUnit::cpuWprops2node() : Sequence(Graph::Node) {
	var cores = self.map cores2node();
	var l1 = self.map l12node();
	var comp = self.map cpu2node(cores, l1);
	return Sequence{ cores, l1, comp }
}

// CPU speed
mapping HCL::ProcessingUnit::speed2node(in n : Sequence(Graph::Node)) : Graph::Node {
	shape := Graph::Shape::BOX;
	label := self.speed.toString() + ' GHz';
	outEdges := n->select(e | getAllUnitsWithSpeed(self.speed)->exists(c | c.label = e.label))->node2edge(Graph::Style::SOLID);
}

query getAllUnitsWithSpeed(in d : Real) : Sequence(HCL::ProcessingUnit) {
	return HCL::ProcessingUnit.allInstances()->select(e | e.speed = d)->asSequence();
}

// cpu components
mapping HCL::ProcessingUnit::cpu2node(in c : Graph::Node, in l : Graph::Node) : Graph::Node {
	label := self.label;
	shape := Graph::Shape::BOX;
	outEdges := Sequence{l, c}->node2edge(Graph::Style::DASHED);
	//outEdges := c->node2edge(Graph::Style::DASHED);
}

mapping HCL::ProcessingUnit::cores2node() : Graph::Node {
	shape := Graph::Shape::OVAL;
	label := self.cores.toString() + ' cores';
}
mapping HCL::ProcessingUnit::l12node() : Graph::Node {
	shape := Graph::Shape::OVAL;
	//label:= self->select(e | e = L1)
	label := self.l1.size.toString() + ' ' + self.l1.magnitude.toString();
}

/** EDGE **/
helper Graph::Node::node2edge(in s : Graph::Style) : Graph::Edge {
	return object Graph::Edge {
		style := s;
		target := self;	
	}
}